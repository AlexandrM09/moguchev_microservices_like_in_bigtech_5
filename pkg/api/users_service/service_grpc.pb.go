// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/users_service/service.proto

package users_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UsersService_Healthz_FullMethodName          = "/api.users_service.UsersService/Healthz"
	UsersService_Readyz_FullMethodName           = "/api.users_service.UsersService/Readyz"
	UsersService_SignUpUserEmail_FullMethodName  = "/api.users_service.UsersService/SignUpUserEmail"
	UsersService_SignInUserEmail_FullMethodName  = "/api.users_service.UsersService/SignInUserEmail"
	UsersService_SignInUserOauth_FullMethodName  = "/api.users_service.UsersService/SignInUserOauth"
	UsersService_UpdateProfile_FullMethodName    = "/api.users_service.UsersService/UpdateProfile"
	UsersService_SearchByNickname_FullMethodName = "/api.users_service.UsersService/SearchByNickname"
)

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// UsersService - сервис отвечающий за работу с пользователями
type UsersServiceClient interface {
	// Healthz - liveness-проба Kubernetes
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	// Readyz - liveness-проба Kubernetes
	Readyz(ctx context.Context, in *ReadyzRequest, opts ...grpc.CallOption) (*ReadyzResponse, error)
	// SignUpUser - регистрация пользователя (по почте и паролю)
	SignUpUserEmail(ctx context.Context, in *SignUpUserEmailRequest, opts ...grpc.CallOption) (*SignUpUserEmailResponse, error)
	// SignInUser - вход/авторизация (по почте и паролю)
	SignInUserEmail(ctx context.Context, in *SignInUserPostRequest, opts ...grpc.CallOption) (*SignInUserPostResponse, error)
	// SignInUserOauth - вход/авторизация (Oauth), регистрация если нет такого пользователя
	SignInUserOauth(ctx context.Context, in *SignInUserOauthRequest, opts ...grpc.CallOption) (*SignInUserOauthResponse, error)
	// UpdateProfile - редактирование профиля пользователя (никнейм - уникальный, информация о себе, аватарка)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	// SearchByNickname- поиск пользователей по никнейму
	SearchByNickname(ctx context.Context, in *SearchByNicknameRequest, opts ...grpc.CallOption) (*SearchByNicknameResponse, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, UsersService_Healthz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) Readyz(ctx context.Context, in *ReadyzRequest, opts ...grpc.CallOption) (*ReadyzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyzResponse)
	err := c.cc.Invoke(ctx, UsersService_Readyz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SignUpUserEmail(ctx context.Context, in *SignUpUserEmailRequest, opts ...grpc.CallOption) (*SignUpUserEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignUpUserEmailResponse)
	err := c.cc.Invoke(ctx, UsersService_SignUpUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SignInUserEmail(ctx context.Context, in *SignInUserPostRequest, opts ...grpc.CallOption) (*SignInUserPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInUserPostResponse)
	err := c.cc.Invoke(ctx, UsersService_SignInUserEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SignInUserOauth(ctx context.Context, in *SignInUserOauthRequest, opts ...grpc.CallOption) (*SignInUserOauthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignInUserOauthResponse)
	err := c.cc.Invoke(ctx, UsersService_SignInUserOauth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProfileResponse)
	err := c.cc.Invoke(ctx, UsersService_UpdateProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) SearchByNickname(ctx context.Context, in *SearchByNicknameRequest, opts ...grpc.CallOption) (*SearchByNicknameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchByNicknameResponse)
	err := c.cc.Invoke(ctx, UsersService_SearchByNickname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility.
//
// UsersService - сервис отвечающий за работу с пользователями
type UsersServiceServer interface {
	// Healthz - liveness-проба Kubernetes
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	// Readyz - liveness-проба Kubernetes
	Readyz(context.Context, *ReadyzRequest) (*ReadyzResponse, error)
	// SignUpUser - регистрация пользователя (по почте и паролю)
	SignUpUserEmail(context.Context, *SignUpUserEmailRequest) (*SignUpUserEmailResponse, error)
	// SignInUser - вход/авторизация (по почте и паролю)
	SignInUserEmail(context.Context, *SignInUserPostRequest) (*SignInUserPostResponse, error)
	// SignInUserOauth - вход/авторизация (Oauth), регистрация если нет такого пользователя
	SignInUserOauth(context.Context, *SignInUserOauthRequest) (*SignInUserOauthResponse, error)
	// UpdateProfile - редактирование профиля пользователя (никнейм - уникальный, информация о себе, аватарка)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	// SearchByNickname- поиск пользователей по никнейму
	SearchByNickname(context.Context, *SearchByNicknameRequest) (*SearchByNicknameResponse, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUsersServiceServer struct{}

func (UnimplementedUsersServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedUsersServiceServer) Readyz(context.Context, *ReadyzRequest) (*ReadyzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readyz not implemented")
}
func (UnimplementedUsersServiceServer) SignUpUserEmail(context.Context, *SignUpUserEmailRequest) (*SignUpUserEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUpUserEmail not implemented")
}
func (UnimplementedUsersServiceServer) SignInUserEmail(context.Context, *SignInUserPostRequest) (*SignInUserPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInUserEmail not implemented")
}
func (UnimplementedUsersServiceServer) SignInUserOauth(context.Context, *SignInUserOauthRequest) (*SignInUserOauthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignInUserOauth not implemented")
}
func (UnimplementedUsersServiceServer) UpdateProfile(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfile not implemented")
}
func (UnimplementedUsersServiceServer) SearchByNickname(context.Context, *SearchByNicknameRequest) (*SearchByNicknameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByNickname not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}
func (UnimplementedUsersServiceServer) testEmbeddedByValue()                      {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	// If the following call pancis, it indicates UnimplementedUsersServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_Readyz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).Readyz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_Readyz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).Readyz(ctx, req.(*ReadyzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SignUpUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SignUpUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SignUpUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SignUpUserEmail(ctx, req.(*SignUpUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SignInUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInUserPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SignInUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SignInUserEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SignInUserEmail(ctx, req.(*SignInUserPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SignInUserOauth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInUserOauthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SignInUserOauth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SignInUserOauth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SignInUserOauth(ctx, req.(*SignInUserOauthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_UpdateProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_SearchByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).SearchByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UsersService_SearchByNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).SearchByNickname(ctx, req.(*SearchByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.users_service.UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _UsersService_Healthz_Handler,
		},
		{
			MethodName: "Readyz",
			Handler:    _UsersService_Readyz_Handler,
		},
		{
			MethodName: "SignUpUserEmail",
			Handler:    _UsersService_SignUpUserEmail_Handler,
		},
		{
			MethodName: "SignInUserEmail",
			Handler:    _UsersService_SignInUserEmail_Handler,
		},
		{
			MethodName: "SignInUserOauth",
			Handler:    _UsersService_SignInUserOauth_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UsersService_UpdateProfile_Handler,
		},
		{
			MethodName: "SearchByNickname",
			Handler:    _UsersService_SearchByNickname_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/users_service/service.proto",
}
