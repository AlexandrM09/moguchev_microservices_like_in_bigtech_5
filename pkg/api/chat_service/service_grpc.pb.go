// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api/chat_service/service.proto

package chat_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_Healthz_FullMethodName        = "/api.chat_service.ChatService/Healthz"
	ChatService_Readyz_FullMethodName         = "/api.chat_service.ChatService/Readyz"
	ChatService_WriteFriend_FullMethodName    = "/api.chat_service.ChatService/WriteFriend"
	ChatService_GetMessageChat_FullMethodName = "/api.chat_service.ChatService/GetMessageChat"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChatService - серивис отвечающий за чаты
type ChatServiceClient interface {
	// Healthz - liveness-проба Kubernetes
	Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error)
	// Readyz - liveness-проба Kubernetes
	Readyz(ctx context.Context, in *ReadyzRequest, opts ...grpc.CallOption) (*ReadyzResponse, error)
	// WriteFriend - Написать сообщение другу
	WriteFriend(ctx context.Context, in *WriteFriendRequest, opts ...grpc.CallOption) (*WriteFriendResponse, error)
	// GetMessageChat  - Получить сообщение из чата с пользователем
	GetMessageChat(ctx context.Context, in *GetMessageChatRequest, opts ...grpc.CallOption) (*GetMessageChatResponse, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Healthz(ctx context.Context, in *HealthzRequest, opts ...grpc.CallOption) (*HealthzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthzResponse)
	err := c.cc.Invoke(ctx, ChatService_Healthz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Readyz(ctx context.Context, in *ReadyzRequest, opts ...grpc.CallOption) (*ReadyzResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadyzResponse)
	err := c.cc.Invoke(ctx, ChatService_Readyz_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) WriteFriend(ctx context.Context, in *WriteFriendRequest, opts ...grpc.CallOption) (*WriteFriendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteFriendResponse)
	err := c.cc.Invoke(ctx, ChatService_WriteFriend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMessageChat(ctx context.Context, in *GetMessageChatRequest, opts ...grpc.CallOption) (*GetMessageChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessageChatResponse)
	err := c.cc.Invoke(ctx, ChatService_GetMessageChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
//
// ChatService - серивис отвечающий за чаты
type ChatServiceServer interface {
	// Healthz - liveness-проба Kubernetes
	Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error)
	// Readyz - liveness-проба Kubernetes
	Readyz(context.Context, *ReadyzRequest) (*ReadyzResponse, error)
	// WriteFriend - Написать сообщение другу
	WriteFriend(context.Context, *WriteFriendRequest) (*WriteFriendResponse, error)
	// GetMessageChat  - Получить сообщение из чата с пользователем
	GetMessageChat(context.Context, *GetMessageChatRequest) (*GetMessageChatResponse, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) Healthz(context.Context, *HealthzRequest) (*HealthzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthz not implemented")
}
func (UnimplementedChatServiceServer) Readyz(context.Context, *ReadyzRequest) (*ReadyzResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Readyz not implemented")
}
func (UnimplementedChatServiceServer) WriteFriend(context.Context, *WriteFriendRequest) (*WriteFriendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteFriend not implemented")
}
func (UnimplementedChatServiceServer) GetMessageChat(context.Context, *GetMessageChatRequest) (*GetMessageChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessageChat not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_Healthz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Healthz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_Healthz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Healthz(ctx, req.(*HealthzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Readyz_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyzRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Readyz(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_Readyz_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Readyz(ctx, req.(*ReadyzRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_WriteFriend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteFriendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).WriteFriend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_WriteFriend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).WriteFriend(ctx, req.(*WriteFriendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMessageChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMessageChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetMessageChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMessageChat(ctx, req.(*GetMessageChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.chat_service.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthz",
			Handler:    _ChatService_Healthz_Handler,
		},
		{
			MethodName: "Readyz",
			Handler:    _ChatService_Readyz_Handler,
		},
		{
			MethodName: "WriteFriend",
			Handler:    _ChatService_WriteFriend_Handler,
		},
		{
			MethodName: "GetMessageChat",
			Handler:    _ChatService_GetMessageChat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/chat_service/service.proto",
}
